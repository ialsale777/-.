function onEdit(e) {
  const sheet = e.source.getActiveSheet();
  const sheetName = sheet.getName();
  const row = e.range.getRow();
  const col = e.range.getColumn();

  if (sheetName === "ÿßŸÑŸàÿ±ŸÇÿ©6") return;

  const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];

  const colNames = {
    "ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÇÿ±ÿßÿ± ÿ®ÿßÿ≥ÿ™ŸÑÿßŸÖ ÿßŸÑŸàÿ±ŸÇ": "MS1",
    "ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑŸÖŸàÿπÿØ": "MS2",
    "ÿ±ÿ≥ÿßŸÑÿ© ÿ™ŸÖ ÿßŸÑÿ™ÿ®ÿµŸäŸÖ": "MS3",
    "ÿ±ÿ≥ÿßŸÑÿ© ÿßÿ≥ÿ™ŸÑÿßŸÖ ÿßŸÑÿ¨Ÿàÿßÿ≤": "MS4"
  };

  for (const triggerColName in colNames) {
    const triggerIndex = headers.indexOf(triggerColName) + 1;
    if (col === triggerIndex) {
      const value = e.range.getValue();
      const statusIndex = headers.indexOf(colNames[triggerColName]) + 1;
      if (value === true) {
        sheet.getRange(row, statusIndex).setValue("üîÅ ÿ¨ÿßŸáÿ≤");
      }
      break;
    }
  }
}

function checkAndSendAll() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const allSheets = ss.getSheets();

  allSheets.forEach(sheet => {
    const name = sheet.getName();
    if (name === "ÿßŸÑŸàÿ±ŸÇÿ©6") return;

    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    const phoneIndex = headers.indexOf("ÿ±ŸÇŸÖ ÿßŸÑÿ¨ŸàÿßŸÑ");

    const config = [
      {
        trigger: "ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÇÿ±ÿßÿ± ÿ®ÿßÿ≥ÿ™ŸÑÿßŸÖ ÿßŸÑŸàÿ±ŸÇ",
        status: "MS1",
        message: r => `üì© *ÿ™ÿ£ŸÉŸäÿØ ÿßÿ≥ÿ™ŸÑÿßŸÖ ÿßŸÑÿ£Ÿàÿ±ÿßŸÇ*\n\n` +
                      `ŸÖÿ±ÿ≠ÿ®Ÿãÿß *${r["ÿßŸÑÿßÿ≥ŸÖ ŸÖÿ∑ÿßÿ®ŸÇ ŸÑŸÑÿ¨Ÿàÿßÿ≤"] || ""}*ÿå\n\n` +
                      `ÿ™ŸÖ ÿßÿ≥ÿ™ŸÑÿßŸÖ ŸÖÿ≥ÿ™ŸÜÿØÿßÿ™ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑÿÆÿßÿµÿ© ÿ®ŸÉ ÿ®ŸÜÿ¨ÿßÿ≠.\n\n` +
                      `‚ö†Ô∏è Ÿáÿ∞Ÿá ÿ±ÿ≥ÿßŸÑÿ© ÿ¢ŸÑŸäÿ©ÿå ŸÑÿß ŸäŸÑÿ≤ŸÖ ÿßŸÑÿ±ÿØ.`
      },
      {
        trigger: "ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑŸÖŸàÿπÿØ",
        status: "MS2",
        message: r => {
          const name = r["ÿßŸÑÿßÿ≥ŸÖ ŸÖÿ∑ÿßÿ®ŸÇ ŸÑŸÑÿ¨Ÿàÿßÿ≤"] || "";
          const rawDate = r["ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑŸÖŸàÿπÿØ"];
          let dateStr = "";

          if (rawDate instanceof Date) {
            const tz = Session.getScriptTimeZone();
            const timePart = Utilities.formatDate(rawDate, tz, "hh:mm");
            const meridian = Utilities.formatDate(rawDate, tz, "a");
            const meridianAr = meridian === "AM" ? "ÿµÿ®ÿßÿ≠Ÿãÿß" : "ŸÖÿ≥ÿßÿ°Ÿã";
            const datePart = Utilities.formatDate(rawDate, tz, "yyyy/MM/dd");
            dateStr = `${datePart} ${timePart} ${meridianAr}`;
          } else {
            dateStr = rawDate?.toString() || "";
          }

          return `üìÖ *ÿ•ÿ¥ÿπÿßÿ± ÿ®ŸÖŸàÿπÿØ ÿßŸÑÿ®ÿµŸÖÿ©*\n\n` +
                 `ÿπÿ≤Ÿäÿ≤Ÿä ÿßŸÑÿπŸÖŸäŸÑ *${name}*ÿå\n\n` +
                 `ŸÖŸàÿπÿØŸÉ ŸÑŸÑÿ™ÿ®ÿµŸäŸÖ ŸáŸà ${dateStr}.\n\n` +
                 `üìç ŸÖŸàŸÇÿπ ÿßŸÑÿ≠ÿ∂Ÿàÿ±: ÿ™ÿ¨ŸàÿßŸÑ ŸÑŸÑÿ≥Ÿäÿßÿ≠ÿ© ‚Äì ÿ®ÿ±ÿ¨ ÿßŸÑÿ≠ŸàŸäÿ≤Ÿä\n\n` +
                 `Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ≠ÿ∂Ÿàÿ± ŸÖÿ®ŸÉÿ±Ÿãÿß ŸÑÿ£ÿÆÿ∞ ÿ±ŸÇŸÖ.\n\n` +
                 `‚ö†Ô∏è Ÿáÿ∞Ÿá ÿ±ÿ≥ÿßŸÑÿ© ÿ™ÿ£ŸÉŸäÿØ ÿ¢ŸÑŸäÿ©ÿå ŸÑÿß ŸäŸÑÿ≤ŸÖ ÿßŸÑÿ±ÿØ ÿπŸÑŸäŸáÿß.`;
        }
      },
      {
        trigger: "ÿ±ÿ≥ÿßŸÑÿ© ÿ™ŸÖ ÿßŸÑÿ™ÿ®ÿµŸäŸÖ",
        status: "MS3",
        message: r => {
          const name = r["ÿßŸÑÿßÿ≥ŸÖ ŸÖÿ∑ÿßÿ®ŸÇ ŸÑŸÑÿ¨Ÿàÿßÿ≤"]?.toString().trim() || "";
          const appNumber = r["ÿ±ŸÇŸÖ ÿßŸÑÿ£ÿ®ŸÑŸÉŸäÿ¥ŸÜ"]?.toString().trim();
          const refPart = appNumber ? `\nüî¢ ÿ±ŸÇŸÖ ÿßŸÑŸÖÿ±ÿ¨ÿπ ÿßŸÑÿÆÿßÿµ ÿ®ŸÉ: *${appNumber}*` : "";
          return `ÿπÿ≤Ÿäÿ≤Ÿä ÿßŸÑÿπŸÖŸäŸÑ *${name}*ÿå\n\nÿ™ŸÖ ÿßŸÑÿ™ÿ®ÿµŸäŸÖ ÿ®ŸÜÿ¨ÿßÿ≠.${refPart}\nŸÖÿØÿ© ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ∑ŸÑÿ® 12‚Äì15 ŸäŸàŸÖ ÿπŸÖŸÑ.\nüì© ÿ≥Ÿäÿ™ŸÖ ÿ•ÿ¥ÿπÿßÿ±ŸÉ ÿπŸÜÿØ ÿ¨ÿßŸáÿ≤Ÿäÿ© ÿßŸÑÿ¨Ÿàÿßÿ≤.\n\n‚ö†Ô∏è Ÿáÿ∞Ÿá ÿ±ÿ≥ÿßŸÑÿ© ÿ¢ŸÑŸäÿ©ÿå ŸÑÿß ŸäŸÑÿ≤ŸÖ ÿßŸÑÿ±ÿØ.`;
        }
      },
      {
        trigger: "ÿ±ÿ≥ÿßŸÑÿ© ÿßÿ≥ÿ™ŸÑÿßŸÖ ÿßŸÑÿ¨Ÿàÿßÿ≤",
        status: "MS4",
        message: r => {
          const name = r["ÿßŸÑÿßÿ≥ŸÖ ŸÖÿ∑ÿßÿ®ŸÇ ŸÑŸÑÿ¨Ÿàÿßÿ≤"]?.toString().trim() || "";
          return `ÿπÿ≤Ÿäÿ≤Ÿä ÿßŸÑÿπŸÖŸäŸÑ *${name}*ÿå\n\nŸÜÿ±ÿ¨Ÿà ÿßŸÑÿ™ŸÅÿ∂ŸÑ ÿ®ÿßŸÑÿ≠ÿ∂Ÿàÿ± ŸÑÿßÿ≥ÿ™ŸÑÿßŸÖ ÿßŸÑÿ¨Ÿàÿßÿ≤ ŸÖŸÜ ŸÖŸÉÿ™ÿ® "ÿ™ÿ¨ŸàÿßŸÑ ŸÑŸÑÿ≥Ÿäÿßÿ≠ÿ©" ‚Äì ÿ®ÿ±ÿ¨ ÿßŸÑÿ≠ŸàŸäÿ≤Ÿä.\nüïò ŸÖŸÜ 12:00 ÿ∏Ÿáÿ±Ÿãÿß ÿ≠ÿ™Ÿâ 10:00 ŸÖÿ≥ÿßÿ°Ÿã (ÿπÿØÿß ÿßŸÑÿ¨ŸÖÿπÿ©)\nüìç ÿßŸÑŸÖŸàÿ∏ŸÅ: ŸÖÿµÿ∑ŸÅŸâ ÿ¥ŸÑÿ®Ÿä\n\n‚úàÔ∏è ŸÜÿ™ŸÖŸÜŸâ ŸÑŸÉ ÿ±ÿ≠ŸÑÿ© ÿ≥ÿπŸäÿØÿ©\n‚ö†Ô∏è Ÿáÿ∞Ÿá ÿ±ÿ≥ÿßŸÑÿ© ÿ¢ŸÑŸäÿ©ÿå ŸÑÿß ŸäŸÑÿ≤ŸÖ ÿßŸÑÿ±ÿØ.`;
        }
      }
    ];

    config.forEach(({ trigger, status, message }) => {
      const triggerIndex = headers.indexOf(trigger);
      const statusIndex = headers.indexOf(status);
      if (triggerIndex === -1 || statusIndex === -1 || phoneIndex === -1) return;

      for (let i = 1; i < data.length; i++) {
        const row = data[i];
        const phoneRaw = row[phoneIndex];
        const statusValue = row[statusIndex];

        if (statusValue !== "üîÅ ÿ¨ÿßŸáÿ≤" || !row[triggerIndex]) continue;

        let phone = phoneRaw.toString().trim().replace(/^0+/, "");
        if (!phone.startsWith("966")) phone = "966" + phone;

        const rowObj = {};
        headers.forEach((h, idx) => rowObj[h] = row[idx]);

        const msg = message(rowObj);

        const body = {
          number: phone,
          text: msg
        };

        const options = {
          method: 'post',
          contentType: 'application/json',
          headers: {
            'apikey': '878559AC4207-4520-A544-80D3FEB9ED9B'
          },
          payload: JSON.stringify(body),
          muteHttpExceptions: true
        };

        try {
          const response = UrlFetchApp.fetch("https://w.eh4.me/message/sendText/ABD1", options);
          const json = JSON.parse(response.getContentText());
          const result = (json.status === "PENDING" || json.status === "success") ? "‚úÖ" : "‚ùå";
          sheet.getRange(i + 1, statusIndex + 1).setValue(result);
        } catch (err) {
          sheet.getRange(i + 1, statusIndex + 1).setValue("‚ùå");
        }
      }
    });
  });
}

